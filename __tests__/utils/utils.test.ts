import {\n  formatCurrency,\n  formatNumber,\n  formatPercentage,\n  formatDate,\n  debounce,\n  validateDashboardData,\n  getContrastColor,\n  calculatePercentageChange,\n  filterData,\n  sortData\n} from '@/lib/utils'\nimport { DashboardData, FilterState } from '@/lib/types'\n\ndescribe('Utils', () => {\n  describe('formatCurrency', () => {\n    it('formats currency correctly', () => {\n      expect(formatCurrency(1234.56)).toBe('$1,234.56')\n      expect(formatCurrency(0)).toBe('$0.00')\n      expect(formatCurrency(1000000)).toBe('$1,000,000.00')\n    })\n\n    it('handles invalid input', () => {\n      expect(formatCurrency(NaN)).toBe('$0.00')\n      expect(formatCurrency(null as any)).toBe('$0.00')\n      expect(formatCurrency(undefined as any)).toBe('$0.00')\n    })\n\n    it('supports different locales and currencies', () => {\n      expect(formatCurrency(1234.56, 'de-DE', 'EUR')).toMatch(/1[.,]234[.,]56/)\n    })\n  })\n\n  describe('formatNumber', () => {\n    it('formats numbers correctly', () => {\n      expect(formatNumber(1234)).toBe('1,234')\n      expect(formatNumber(1234567)).toBe('1,234,567')\n      expect(formatNumber(0)).toBe('0')\n    })\n\n    it('handles invalid input', () => {\n      expect(formatNumber(NaN)).toBe('0')\n      expect(formatNumber(null as any)).toBe('0')\n    })\n  })\n\n  describe('formatPercentage', () => {\n    it('formats percentage correctly', () => {\n      expect(formatPercentage(12.345)).toBe('12.3%')\n      expect(formatPercentage(0)).toBe('0.0%')\n      expect(formatPercentage(-5.67)).toBe('-5.7%')\n    })\n\n    it('supports custom decimal places', () => {\n      expect(formatPercentage(12.345, 2)).toBe('12.35%')\n      expect(formatPercentage(12.345, 0)).toBe('12%')\n    })\n  })\n\n  describe('formatDate', () => {\n    it('formats dates correctly', () => {\n      const date = new Date('2024-01-15')\n      expect(formatDate(date, 'short')).toMatch(/Jan 15, 2024/)\n      expect(formatDate('2024-01-15', 'medium')).toMatch(/Jan 15, 2024/)\n    })\n\n    it('handles invalid dates', () => {\n      expect(formatDate('invalid-date')).toBe('Invalid Date')\n      expect(formatDate(new Date('invalid'))).toBe('Invalid Date')\n    })\n  })\n\n  describe('debounce', () => {\n    jest.useFakeTimers()\n\n    it('debounces function calls', () => {\n      const mockFn = jest.fn()\n      const debouncedFn = debounce(mockFn, 100)\n\n      debouncedFn('test1')\n      debouncedFn('test2')\n      debouncedFn('test3')\n\n      expect(mockFn).not.toHaveBeenCalled()\n\n      jest.advanceTimersByTime(100)\n\n      expect(mockFn).toHaveBeenCalledTimes(1)\n      expect(mockFn).toHaveBeenCalledWith('test3')\n    })\n\n    afterEach(() => {\n      jest.clearAllTimers()\n    })\n  })\n\n  describe('validateDashboardData', () => {\n    const validData: DashboardData = {\n      revenue: 100000,\n      revenueChange: 10,\n      users: 5000,\n      usersChange: 5,\n      conversions: 250,\n      conversionsChange: -2,\n      growthRate: 15,\n      growthRateChange: 3,\n      revenueData: [{ month: 'Jan', revenue: 50000 }],\n      userGrowthData: [{ month: 'Jan', users: 2500 }],\n      trafficData: [{ name: 'Organic', value: 1000 }],\n      tableData: [{\n        id: '1',\n        customer: 'John Doe',\n        email: 'john@example.com',\n        status: 'Active',\n        revenue: 2500,\n        date: '2024-01-15'\n      }]\n    }\n\n    it('validates correct dashboard data', () => {\n      expect(validateDashboardData(validData)).toBe(true)\n    })\n\n    it('rejects invalid data', () => {\n      expect(validateDashboardData(null)).toBe(false)\n      expect(validateDashboardData({})).toBe(false)\n      expect(validateDashboardData({ revenue: 'invalid' })).toBe(false)\n    })\n  })\n\n  describe('getContrastColor', () => {\n    it('returns correct contrast colors', () => {\n      expect(getContrastColor('#ffffff')).toBe('#000000')\n      expect(getContrastColor('#000000')).toBe('#ffffff')\n      expect(getContrastColor('#ff0000')).toBe('#ffffff')\n    })\n\n    it('handles colors without hash', () => {\n      expect(getContrastColor('ffffff')).toBe('#000000')\n      expect(getContrastColor('000000')).toBe('#ffffff')\n    })\n  })\n\n  describe('calculatePercentageChange', () => {\n    it('calculates percentage change correctly', () => {\n      expect(calculatePercentageChange(110, 100)).toBe(10)\n      expect(calculatePercentageChange(90, 100)).toBe(-10)\n      expect(calculatePercentageChange(100, 100)).toBe(0)\n    })\n\n    it('handles zero previous value', () => {\n      expect(calculatePercentageChange(100, 0)).toBe(100)\n      expect(calculatePercentageChange(0, 0)).toBe(0)\n    })\n  })\n\n  describe('filterData', () => {\n    const testData = [\n      { id: '1', customer: 'John Doe', email: 'john@example.com', status: 'Active', date: '2024-01-15' },\n      { id: '2', customer: 'Jane Smith', email: 'jane@example.com', status: 'Inactive', date: '2024-01-10' }\n    ]\n\n    it('filters by search term', () => {\n      const filters: Partial<FilterState> = { search: 'john' }\n      const result = filterData(testData, filters)\n      expect(result).toHaveLength(1)\n      expect(result[0].customer).toBe('John Doe')\n    })\n\n    it('filters by status', () => {\n      const filters: Partial<FilterState> = { status: ['Active'] }\n      const result = filterData(testData, filters)\n      expect(result).toHaveLength(1)\n      expect(result[0].status).toBe('Active')\n    })\n\n    it('returns all data when no filters applied', () => {\n      const result = filterData(testData, {})\n      expect(result).toHaveLength(2)\n    })\n  })\n\n  describe('sortData', () => {\n    const testData = [\n      { name: 'Charlie', age: 30, score: 85 },\n      { name: 'Alice', age: 25, score: 95 },\n      { name: 'Bob', age: 35, score: 75 }\n    ]\n\n    it('sorts strings ascending', () => {\n      const result = sortData(testData, 'name', 'asc')\n      expect(result[0].name).toBe('Alice')\n      expect(result[2].name).toBe('Charlie')\n    })\n\n    it('sorts strings descending', () => {\n      const result = sortData(testData, 'name', 'desc')\n      expect(result[0].name).toBe('Charlie')\n      expect(result[2].name).toBe('Alice')\n    })\n\n    it('sorts numbers ascending', () => {\n      const result = sortData(testData, 'age', 'asc')\n      expect(result[0].age).toBe(25)\n      expect(result[2].age).toBe(35)\n    })\n\n    it('sorts numbers descending', () => {\n      const result = sortData(testData, 'score', 'desc')\n      expect(result[0].score).toBe(95)\n      expect(result[2].score).toBe(75)\n    })\n  })\n})